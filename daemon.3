.\" Copyright 1999 raf (raf2@zip.com.au)
.TH daemon 3  "25 June 1999" "raf" "Twisted Systems Freeware"
.SH NAME
daemon_init, daemon_close - initialise and close a daemon
.SH SYNOPSIS
.nf
.B #include <daemon/daemon.h>
.B #include <daemon/sig.h>
.sp
.BI "int daemon_init(const char *" name ", sighandler_t *" hup ", sighandler_t *" term );
.sp
.BI "int daemon_close()"
.fi
.SH DESCRIPTION
.I daemon_init()
initialises a daemon by performing the following tasks. Disables core files to
prevent security holes. Backgrounds the process to lose process group
leadership. Becomes a process session leader. When SVR4 is defined, backgrounds
the process again to lose process group leadership. This prevents the process
from gaining a controlling terminal. Under BSD, you must include O_NOCTTY when
opening terminals to prevent the process from gaining a controlling terminal.
Changes the current directory to the root directory so as not to hamper
umounts. Clears the umask to enable explicit file modes. Closes all files (as
determined by sysconf(2)). Opens stdin, stdout and stderr to /dev/null in case
something expects them to be open. If
.I hup
is non-null, registers a SIGHUP handler. If
.I term
is non-null, registers a SIGTERM handler. If
.I name
is non-null, places the process id in the file system and locks it.
.PP
.I daemon_close()
unlinks the daemon's (locked) process id file.
.SH RETURNS
Returns 0 on success, -1 on error (with errno set appropriately).
Reasons for failure are: setrlimit(2), fork(2), chdir(2), sysconf(2),
open(2), dup2(2), open(2), fcntl(2), write(2), sigemptyset(2), sigaddset(2),
sigaction(2), ENAMETOOLONG if the path for the process id file is too long,
and ENOMEM if memory for the path cannot be allocated.
.SH "SEE ALSO"
.BR daemon(1),
.BR err(3),
.BR fifo(3),
.BR lim(3),
.BR mem(3),
.BR msg(3),
.BR prog(3),
.BR sig(3),
.BR slog(3)
