.\" Copyright 1999 raf (raf2@zip.com.au)
.TH prog 3  "25 June 1999" "raf" "Twisted Systems Freeware"
.SH NAME
prog_set_name,
prog_set_usage,
prog_set_desc,
prog_set_version,
prog_set_date,
prog_set_author,
prog_set_contact,
prog_set_vendor,
prog_set_url,
prog_set_legal,
prog_set_msg,
prog_set_dbg,
prog_set_debug_level,
prog_name,
prog_usage,
prog_desc,
prog_version,
prog_date,
prog_author,
prog_contact,
prog_vendor,
prog_url,
prog_legal,
prog_msg,
prog_dbg,
prog_debug_level,
prog_usage_msg,
prog_help_msg,
prog_help_check,
prog_debug_check,
prog_remove_arg,
prog_basename,
prog_error_stderr,
prog_error_file,
prog_error_syslog,
prog_error_none,
prog_debug_stderr,
prog_debug_file,
prog_debug_syslog,
prog_debug_none
\-
general program utilities: identification, debug/error/log messages.
.SH SYNOPSIS
.nf
.B #include <daemon/prog.h>
.sp
.BI "const char *prog_set_name(const char *" name )
.sp
.BI "const char *prog_set_usage(const char *" usage )
.sp
.BI "const char *prog_set_desc(const char *" desc )
.sp
.BI "const char *prog_set_version(const char *" version )
.sp
.BI "const char *prog_set_date(const char *" date )
.sp
.BI "const char *prog_set_author(const char *" author )
.sp
.BI "const char *prog_set_vendor(const char *" vendor )
.sp
.BI "const char *prog_set_contact(const char *" contact )
.sp
.BI "const char *prog_set_url(const char *" url )
.sp
.BI "const char *prog_set_legal(const char *" legal )
.sp
.BI "Msg *prog_set_msg(Msg *" msg )
.sp
.BI "Msg *prog_set_dbg(Msg *" dbg )
.sp
.BI "size_t prog_set_debug_level(size_t " level )
.sp
.BI "const char *prog_name(void)"
.sp
.BI "const char *prog_usage(void)"
.sp
.BI "const char *prog_desc(void)"
.sp
.BI "const char *prog_version(void)"
.sp
.BI "const char *prog_date(void)"
.sp
.BI "const char *prog_author(void)"
.sp
.BI "const char *prog_vendor(void)"
.sp
.BI "const char *prog_contact(void)"
.sp
.BI "const char *prog_url(void)"
.sp
.BI "const char *prog_legal(void)"
.sp
.BI "Msg *prog_msg(void)"
.sp
.BI "Msg *prog_dbg(void)"
.sp
.BI "size_t prog_debug_level(void)"
.sp
.BI "void prog_usage_msg(const char *" fmt ", ...)"
.sp
.BI "void prog_help_msg(void)"
.sp
.BI "void prog_help_check(int " ac ", char **" av )
.sp
.BI "void prog_debug_check(int *" ac ", char ***" av )
.sp
.BI "void prog_remove_arg(int *" ac ", char ***" av ", int " a )
.sp
.BI "char *prog_basename(const char *" path )
.sp
.BI "int prog_error_stderr(void)"
.sp
.BI "int prog_error_logfile(const char *" path )
.sp
.BI "int prog_error_syslog(const char *" ident ", int " option ", int " facility )
.sp
.BI "int prog_error_none(void)"
.sp
.BI "int prog_debug_stderr(void)"
.sp
.BI "int prog_debug_logfile(const char *" path )
.sp
.BI "int prog_debug_syslog(const char *" id ", int " option ", int " facility )
.sp
.BI "int prog_debug_none(void)"
.fi
.SH DESCRIPTION
.I debug()
outputs a debug message if
.I lvl
is less than or equal to the program's current debug level.
.I fmt
is a printf-like format string and processes any remaining arguments
in the same way as printf.
.PP
.I error()
outputs an error message. If the program's name has been supplied using
prog_set_name(), the error message will be preceeded by the name, a colon
and a space.
.I fmt
is a printf-like format string and processes any remaining arguments in the
same way as printf. Returns -1.
.PP
.I fatal()
outputs an error message and exits with a return code of 1. The error
message, will contain the string "fatal: ".
.I fmt
is a printf-like format string and processes any remaining arguments
in the same way as printf.
.PP
.I dump()
outputs an error message and then abort()s the program. The error message,
will contain the string "dump: ".
.I fmt
is a printf-like format string and processes any remaining arguments in the
same way as printf.
.PP
.I debugsys()
outputs a debug message if
.I lvl
is less than or equal to the program's current debug level.
.I fmt
is a printf-like format string and processes any remaining arguments in the
same way as printf. After the message is a colon, a space and the string
version of the current value of errno.
.PP
.I errorsys()
outputs an error message. If the program's name has been supplied using
prog_set_name(), the error message will be preceeded by the name, a colon
and a space.
.I fmt
is a printf-like format string and processes any remaining arguments in the
same way as printf. After the message is a colon, a space and the string
version of the current value of errno. Returns -1.
.PP
.I fatalsys()
outputs an error message and exits with a return code of 1. The error
message, will contain the string "fatal: ".
.I fmt
is a printf-like format string and processes any remaining arguments in the
same way as printf. After the message is a colon, a space and the string
version of the current value of errno.
.PP
.I dumpsys()
outputs an error message and then abort()s the program. The error message,
will contain the string "dump: ".
.I fmt
is a printf-like format string and processes any remaining arguments in the
same way as printf. After the message is a colon, a space and the string
version of the current value of errno.
.PP
.I errno_set()
sets errno to errnum and returns -1.
.SH "SEE ALSO"
.BR libdaemon(3)
